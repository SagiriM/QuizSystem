/*
using MHS.QuizSystem;

//Console.WriteLine("Hello");
//Console.ReadKey();
public class MainWindow : OptionWindow
{
    private readonly IQuestionRepository qr;
    private readonly IExamPaperRepository pr;
    private readonly IExamPaperService ps;

    public MainWindow(IQuestionRepository qr, IExamPaperRepository pr, IExamPaperService ps)
    {
        this.qr = qr;
        this.pr = pr;
        this.ps = ps;    

        Area = new(0, 0, Console.WindowWidth, Console.WindowHeight - 4);
        Title = "";
        TitleArea = Area.Empty;
        Options = new[] {"开始练习", "添加题目", "删除题目", "修改题目", "搜索题目", "退    出"};
        OptionAreas = new Area[] {
            new(Area.X + Area.Width / 2 - 4, Area.Y + Area.Height / 4 + 1, 8, 1),
                new(Area.X + Area.Width / 2 - 4, Area.Y + Area.Height / 4 + 3, 8, 1),
                new(Area.X + Area.Width / 2 - 4, Area.Y + Area.Height / 4 + 5, 8, 1),
                new(Area.X + Area.Width / 2 - 4, Area.Y + Area.Height / 4 + 7, 8, 1),
                new(Area.X + Area.Width / 2 - 4, Area.Y + Area.Height / 4 + 9, 8, 1),
                new(Area.X + Area.Width / 2 - 4, Area.Y + Area.Height / 4 + 11, 8, 1),
        };
    } 

    protected override void HandleEnter()
    {
        switch(Selection)
        {
            case 0:
                Start();
                break;
            case 1:
                Add();
                break;
            case 2:
                Delete();
                break;
            case 3:
                Update();
                break;
            case 4:
                Search();
                break;
            case 5:
                running = false;
                return;
        } 
    }

    private void Start()
    {
        // 学生信息窗口
        FormWindow fw = GetStudentInfoW();
        fw.Run();

        // 检查输入
        var inputs = CheckStudentInfo(fw.Inputs);
        if(!inputs.HasValue) return;

        // 生成试卷
        ExamPaper paper;
        try
        {
            paper = ps.GeneratePaper(inputs.Value.Id, inputs.Value.Name, DateTime.Now, 3, 3, 1);

        }
        catch(Exception)
        {
            OptionWindow ow = GetConfirmationW("题库错误");
            ow.Run();
            return;                  
        }
        string[] questions = paper.Questions.Select(q => q.ToReportString()).ToArray(); 
        // 显示答题窗口
        fw = GetQuizW(questions);
        fw.Run();

        // 生成报告
        string report = ps.GenerateReport(paper, fw.Inputs);

        // 显示报告窗口
        OptionWindow rw = GetReportW(report);
        rw.Run();

        // 保存结果
        pr.Save(paper);
    }


    private void Add() 
    {
        // 显示问题信息窗口
        string[] inputs = new string[0];
        Question? q = null;
        while (q == null)
        {
            FormWindow fw = GetQuestionInfoW(inputs);
            fw.Run();
            inputs = fw.Inputs;
            q = CheckQuestionInfo(inputs);
        }

        // 显示确认窗口
        OptionWindow cw = GetConfirmationW();
        cw.Run();

        if(cw.Selection == 0)
            qr.Add(q);
    }
    private void Delete() 
    {
        // 显示问题Id窗口
        string[] inputs = new string[0];
        Guid? id = null;
        while (id == null)
        {
            FormWindow fw = GetQuestionIdW();
            fw.Run();
            inputs = fw.Inputs; 
            id = CheckQuestionId(inputs);
        }
        // 显示确认窗口
        OptionWindow cw = GetConfirmationW();
        cw.Run();

        if(cw.Selection == 0) qr.Delete(id.Value);
    }
    private void Update() 
    {
        // 显示问题Id窗口
        string[] inputs = new string[0];
        Guid? id = null;
        while (id == null)
        {
            FormWindow fw = GetQuestionIdW();
            fw.Run();
            inputs = fw.Inputs; 
            id = CheckQuestionId(inputs);
        }

        // 获取问题的信息 
        try
        {
            Question question = qr.GetById(id.Value);
            inputs = new string[] {question.Number.ToString(), question.Type.GetFriendlyString(), question.Content, question.Answer};
        }
        catch(Exception)
        {
            OptionWindow ow = GetConfirmationW("编号格式错误");
            ow.Run();
            return;                  
        }
        
        // 显示问题信息窗口
        Question? q = null;
        while (q == null)
        {
            FormWindow fw = GetQuestionInfoW(inputs);
            fw.Run();
            inputs = fw.Inputs;
            q = CheckQuestionInfo(inputs);
        }
        OptionWindow cw = GetConfirmationW();
        cw.Run();

        if(cw.Selection == 0)
            qr.Update(new Question(id.Value, q.Number, q.Type, inputs[2], inputs[3]));
    }

    private void Search()
    {
        // 显示问题id窗口
        string[] inputs = new string[0];
        Guid? id = null;
        while (id == null)
        {
            FormWindow fw = GetQuestionIdW();
            fw.Run();
            inputs = fw.Inputs; 
            id = CheckQuestionId(inputs);
        }

        // 获取问题的信息 
        try
        {
            Question q = qr.GetById(id.Value);
            inputs = new string[] {q.Number.ToString(), q.Type.GetFriendlyString(), q.Content, q.Answer};
        }
        catch(Exception)
        {
            OptionWindow ow = GetConfirmationW("编号格式错误");
            ow.Run();
            return;                  
        }

        // 显示问题信息窗口
        FormWindow w = GetQuestionInfoW(inputs, new bool[] {false, false, false, false});
        w.Run();
    }

    private FormWindow GetQuizW(string[] questions)
    {
        Area windowArea = new(0, 0, Console.WindowWidth, Console.WindowHeight - 4);
        string title = "";
        Area titleArea = new(0, 0, 0, 0);
        string[] options = questions;
        string[] inputs = new string[questions.Length];
        bool[] editions = new bool[questions.Length];
        for(int i = 0; i < inputs.Length; i++)
        {
            inputs[i] = "";
            editions[i] = true;
        }

        Area[] optionAreas = new Area[] {
            new(windowArea.X + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
        };
        Area[] inputAreas = new Area[] {
            new(windowArea.X + windowArea.Width / 2 + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + windowArea.Width / 2 + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + windowArea.Width / 2 + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + windowArea.Width / 2 + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + windowArea.Width / 2 + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + windowArea.Width / 2 + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
                new(windowArea.X + windowArea.Width / 2 + 1, windowArea.Y + 1, (windowArea.Width - 3) / 2, windowArea.Height - 2),
        };
        FormWindow fw = new (windowArea, title, titleArea, options, optionAreas, inputs, inputAreas, editions);
        return fw;
    }
    private OptionWindow GetReportW(string content)
    {

        Area windowArea = new(0, 0, Console.WindowWidth, Console.WindowHeight - 4);
        string title = "成绩单";
        Area titleArea = new(windowArea.X + windowArea.Width / 2 - 3, windowArea.Y + 1, 6, 1);
        string[] options = new string[1];
        options[0] = content;
        Area[] optionAreas = new Area[]{
            new(windowArea.X + windowArea.Width / 5, windowArea.Y + 2, (windowArea.Width - 2) / 5 * 4, windowArea.Height - 2)
        };
        OptionWindow ow = new(windowArea, title, titleArea, options, optionAreas);
        return ow;
    }
    private FormWindow GetQuestionIdW()
    {
        Area windowArea = new(0, 0, Console.WindowWidth, Console.WindowHeight - 4);
        string title = "";
        Area titleArea = new(windowArea.X + windowArea.Width / 2 - 4, windowArea.Y + windowArea.Height / 4, 8, 1);
        string[] options = {"编  号："};
        string[] inputs = {""};
        bool[] editions = {true};
        Area[] optionAreas = new Area[] {
            new(windowArea.X + windowArea.Width / 2 - 8, windowArea.Y + windowArea.Height / 2 + 1, 8, 1),
        };
        Area[] inputAreas = new Area[] {
            new(windowArea.X + windowArea.Width / 2, windowArea.Y + windowArea.Height / 2 + 1, 10, 1),
        };
        FormWindow fw = new(windowArea, title, titleArea, options, optionAreas, inputs, inputAreas, editions);
        return fw;
    }

    private OptionWindow GetConfirmationW(string title = "")
    {
        Area windowArea = new(0, 0, Console.WindowWidth, Console.WindowHeight - 4);
        Area titleArea = new(windowArea.X + windowArea.Width / 2 - 4, windowArea.Y + windowArea.Height / 4, 8, 1);
        string[] options = {"确认", "取消"};
        Area[] optionAreas = new Area[] {
            new(windowArea.X + windowArea.Width / 2 - 5, windowArea.Y + windowArea.Height / 2 + 1, 4, 1),
                new(windowArea.X + windowArea.Width / 2 + 1, windowArea.Y + windowArea.Height / 2 + 1, 4, 1),
        };
        OptionWindow ow = new(windowArea, title, titleArea, options, optionAreas);
        return ow;
    }

    private FormWindow GetQuestionInfoW(string[]? inputs = null, bool[]? editions = null)
    {
        Area windowArea = new(0, 0, Console.WindowWidth, Console.WindowHeight - 4);
        string title = "";
        Area titleArea = new(windowArea.X + windowArea.Width / 2 - 4, windowArea.Y + windowArea.Height / 4, 8, 1);
        string[] options = {"编  号：", "类  型：", "内  容：", "答  案:"};
        if(inputs == null)
            inputs = new string[options.Length];
        if(editions == null)
            editions = new bool[options.Length];
        for(int i = 0; i < inputs.Length; i++)
        {
            inputs[i] = "";
            editions[i] = true;
        }

        Area[] optionAreas = new Area[] {
            new(windowArea.X + windowArea.Width / 4 - 8, windowArea.Y + windowArea.Height / 4 + 1, 8, 1),
                new(windowArea.X + windowArea.Width / 4 - 8, windowArea.Y + windowArea.Height / 4 + 3, 8, 1),
                new(windowArea.X + windowArea.Width / 4 - 8, windowArea.Y + windowArea.Height / 4 + 5, 8, 20),
                new(windowArea.X + windowArea.Width / 4 - 8, windowArea.Y + windowArea.Height / 4 + 25, 8, 1),
        };
        Area[] inputAreas = new Area[] {
            new(windowArea.X + windowArea.Width / 4, windowArea.Y + windowArea.Height / 4 + 1, 40, 1),
                new(windowArea.X + windowArea.Width / 4, windowArea.Y + windowArea.Height / 4 + 3, 40, 1),
                new(windowArea.X + windowArea.Width / 4, windowArea.Y + windowArea.Height / 4 + 5, 40, 20),
                new(windowArea.X + windowArea.Width / 4, windowArea.Y + windowArea.Height / 4 + 25, 40, 1),
        };

        FormWindow fw = new(windowArea, title, titleArea, options, optionAreas, inputs, inputAreas, editions);
        return fw;
    } 

    private FormWindow GetStudentInfoW()
    {
        Area windowArea = new(0, 0, Console.WindowWidth, Console.WindowHeight - 4);

        string title = "";
        Area titleArea = new(windowArea.X + windowArea.Width / 2 - 4, windowArea.Y + windowArea.Height / 4, 8, 1);
        string[] options = {"答题人：", "学  号："};
        string[] inputs = {"", ""};
        bool[] editions = {true, true};
        Area[] optionAreas = new Area[] {
            new(windowArea.X + windowArea.Width / 2 - 8, windowArea.Y + windowArea.Height / 2 + 1, 8, 1),
                new(windowArea.X + windowArea.Width / 2 - 8, windowArea.Y + windowArea.Height / 2 + 3, 8, 1),
        };
        Area[] inputAreas = new Area[] {
            new(windowArea.X + windowArea.Width / 2, windowArea.Y + windowArea.Height / 2 + 1, 10, 1),
                new(windowArea.X + windowArea.Width / 2, windowArea.Y + windowArea.Height / 2 + 3, 10, 1),
        };
        FormWindow fw = new(windowArea, title, titleArea, options, optionAreas, inputs, inputAreas, editions);
        return fw;
    }

    private Question? CheckQuestionInfo(string[] inputs)
    {
        if(!int.TryParse(inputs[0]?.Trim(), out int number))
        {
            OptionWindow ow = GetConfirmationW("编号格式错误");
            ow.Run();
            return null;                  
        }
        else if(!QuestionType.TryParse(inputs[1]?.Trim(), out QuestionType type))
        {
            OptionWindow ow = GetConfirmationW("类型格式错误");
            ow.Run();
            return null;                  
        }
        else if(string.IsNullOrEmpty(inputs[2]))
        {
            OptionWindow ow = GetConfirmationW("输入不能为空");
            ow.Run();
            return null;                  
        }
        else if(string.IsNullOrEmpty(inputs[3]))
        {
            OptionWindow ow = GetConfirmationW("输入不能为空");
            ow.Run();
            return null;                  
        }
        else return new(number, type, inputs[2], inputs[3]);
    }
    private (int Id, string Name)? CheckStudentInfo(string[] inputs)
    {
        if(string.IsNullOrEmpty(inputs[0]) || string.IsNullOrEmpty(inputs[1]))
        {
            OptionWindow ow = GetConfirmationW("输入格式错误");
            ow.Run();
            return null;                  
        }
        else if(!int.TryParse(inputs[1], out int id))
        {
            OptionWindow ow = GetConfirmationW("输入格式错误");
            ow.Run();
            return null;                  
        }
        else return (id, inputs[0]);
    }
    private Guid? CheckQuestionId(string[] inputs)
    {
        if(!Guid.TryParse(inputs[0]?.Trim(), out Guid id))
        {
            OptionWindow ow = GetConfirmationW("编号格式错误");
            ow.Run();
            return null;                  
        }
        else return id;
    }
}
*/
